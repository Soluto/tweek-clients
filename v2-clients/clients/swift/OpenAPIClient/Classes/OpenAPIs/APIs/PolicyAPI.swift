//
// PolicyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class PolicyAPI: APIBase {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPolicies(completion: ((data: [AnyObject]?, error: ErrorType?) -> Void)) {
        getPoliciesWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /policies
     - Get Policies     - examples: [{contentType=application/json, example="{}", statusCode=200}]

     - returns: RequestBuilder<[AnyObject]> 
     */
    public class func getPoliciesWithRequestBuilder() -> RequestBuilder<[AnyObject]> {
        let path = "/policies"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[AnyObject]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func replacePolicy(completion: ((error: ErrorType?) -> Void)) {
        replacePolicyWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - PUT /policies
     - Replace Policy
     - returns: RequestBuilder<Void> 
     */
    public class func replacePolicyWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/policies"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter patchOperation: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updatePolicy(patchOperation patchOperation: [PatchOperation], completion: ((error: ErrorType?) -> Void)) {
        updatePolicyWithRequestBuilder(patchOperation: patchOperation).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - PATCH /policies
     - Update Policy     - parameter patchOperation: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func updatePolicyWithRequestBuilder(patchOperation patchOperation: [PatchOperation]) -> RequestBuilder<Void> {
        let path = "/policies"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = patchOperation.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
