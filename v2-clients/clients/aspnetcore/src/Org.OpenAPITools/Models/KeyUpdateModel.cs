/*
 * Tweek
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class KeyUpdateModel : IEquatable<KeyUpdateModel>
    { 
        /// <summary>
        /// Gets or Sets Implementation
        /// </summary>
        [Required]
        [DataMember(Name="implementation")]
        public Object Implementation { get; set; }

        /// <summary>
        /// Gets or Sets Manifest
        /// </summary>
        [Required]
        [DataMember(Name="manifest")]
        public Object Manifest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeyUpdateModel {\n");
            sb.Append("  Implementation: ").Append(Implementation).Append("\n");
            sb.Append("  Manifest: ").Append(Manifest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((KeyUpdateModel)obj);
        }

        /// <summary>
        /// Returns true if KeyUpdateModel instances are equal
        /// </summary>
        /// <param name="other">Instance of KeyUpdateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyUpdateModel other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Implementation == other.Implementation ||
                    Implementation != null &&
                    Implementation.Equals(other.Implementation)
                ) && 
                (
                    Manifest == other.Manifest ||
                    Manifest != null &&
                    Manifest.Equals(other.Manifest)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Implementation != null)
                    hashCode = hashCode * 59 + Implementation.GetHashCode();
                    if (Manifest != null)
                    hashCode = hashCode * 59 + Manifest.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(KeyUpdateModel left, KeyUpdateModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(KeyUpdateModel left, KeyUpdateModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
