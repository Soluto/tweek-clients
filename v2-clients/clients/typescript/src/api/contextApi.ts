/**
 * Tweek
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

/* tslint:disable:no-unused-locals */

import { ObjectSerializer, Authentication, HttpBasicAuth, ApiKeyAuth, OAuth, VoidAuth } from '../model/models';

let defaultBasePath = 'http://localhost/api/v2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ContextApiApiKeys {
}

export class ContextApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ContextApiApiKeys, value: string) {
        (this.authentications as any)[ContextApiApiKeys[key]].apiKey = value;
    }

    /**
     * Delete identity context property
     * @param identityType the type of the identity - for example user
     * @param identityId the identifier of the identity - for example jaime
     * @param prop the property to delete, for example age
     */
    public deleteContextProp (identityType: string, identityId: string, prop: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/context/{identityType}/{identityId}/{prop}'
            .replace('{' + 'identityType' + '}', encodeURIComponent(String(identityType)))
            .replace('{' + 'identityId' + '}', encodeURIComponent(String(identityId)))
            .replace('{' + 'prop' + '}', encodeURIComponent(String(prop)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'identityType' is not null or undefined
        if (identityType === null || identityType === undefined) {
            throw new Error('Required parameter identityType was null or undefined when calling deleteContextProp.');
        }

        // verify required parameter 'identityId' is not null or undefined
        if (identityId === null || identityId === undefined) {
            throw new Error('Required parameter identityId was null or undefined when calling deleteContextProp.');
        }

        // verify required parameter 'prop' is not null or undefined
        if (prop === null || prop === undefined) {
            throw new Error('Required parameter prop was null or undefined when calling deleteContextProp.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get identity context
     * @param identityType the type of the identity - for example user
     * @param identityId the identifier of the identity - for example jaime
     */
    public getContext (identityType: string, identityId: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/context/{identityType}/{identityId}'
            .replace('{' + 'identityType' + '}', encodeURIComponent(String(identityType)))
            .replace('{' + 'identityId' + '}', encodeURIComponent(String(identityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'identityType' is not null or undefined
        if (identityType === null || identityType === undefined) {
            throw new Error('Required parameter identityType was null or undefined when calling getContext.');
        }

        // verify required parameter 'identityId' is not null or undefined
        if (identityId === null || identityId === undefined) {
            throw new Error('Required parameter identityId was null or undefined when calling getContext.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Save identity context
     * @param identityType the type of the identity - for example user
     * @param identityId the identifier of the identity - for example jaime
     */
    public saveContext (identityType: string, identityId: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/context/{identityType}/{identityId}'
            .replace('{' + 'identityType' + '}', encodeURIComponent(String(identityType)))
            .replace('{' + 'identityId' + '}', encodeURIComponent(String(identityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'identityType' is not null or undefined
        if (identityType === null || identityType === undefined) {
            throw new Error('Required parameter identityType was null or undefined when calling saveContext.');
        }

        // verify required parameter 'identityId' is not null or undefined
        if (identityId === null || identityId === undefined) {
            throw new Error('Required parameter identityId was null or undefined when calling saveContext.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
