/**
 * Tweek
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

/* tslint:disable:no-unused-locals */
import { KeyUpdateModel } from '../model/keyUpdateModel';

import { ObjectSerializer, Authentication, HttpBasicAuth, ApiKeyAuth, OAuth, VoidAuth } from '../model/models';

let defaultBasePath = 'http://localhost/api/v2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum KeysApiApiKeys {
}

export class KeysApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: KeysApiApiKeys, value: string) {
        (this.authentications as any)[KeysApiApiKeys[key]].apiKey = value;
    }

    /**
     * Save Key
     * @param keyPath 
     * @param authorName 
     * @param authorEmail 
     * @param keyUpdateModel 
     */
    public createKey (keyPath: string, authorName: string, authorEmail: string, keyUpdateModel: KeyUpdateModel) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/keys';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'keyPath' is not null or undefined
        if (keyPath === null || keyPath === undefined) {
            throw new Error('Required parameter keyPath was null or undefined when calling createKey.');
        }

        // verify required parameter 'authorName' is not null or undefined
        if (authorName === null || authorName === undefined) {
            throw new Error('Required parameter authorName was null or undefined when calling createKey.');
        }

        // verify required parameter 'authorEmail' is not null or undefined
        if (authorEmail === null || authorEmail === undefined) {
            throw new Error('Required parameter authorEmail was null or undefined when calling createKey.');
        }

        // verify required parameter 'keyUpdateModel' is not null or undefined
        if (keyUpdateModel === null || keyUpdateModel === undefined) {
            throw new Error('Required parameter keyUpdateModel was null or undefined when calling createKey.');
        }

        if (keyPath !== undefined) {
            localVarQueryParameters['keyPath'] = ObjectSerializer.serialize(keyPath, "string");
        }

        if (authorName !== undefined) {
            localVarQueryParameters['author.name'] = ObjectSerializer.serialize(authorName, "string");
        }

        if (authorEmail !== undefined) {
            localVarQueryParameters['author.email'] = ObjectSerializer.serialize(authorEmail, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(keyUpdateModel, "KeyUpdateModel")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param keyPath 
     * @param authorName 
     * @param authorEmail 
     * @param requestBody 
     */
    public keysDeleteKey (keyPath: string, authorName: string, authorEmail: string, requestBody?: Array<string>) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/keys';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'keyPath' is not null or undefined
        if (keyPath === null || keyPath === undefined) {
            throw new Error('Required parameter keyPath was null or undefined when calling keysDeleteKey.');
        }

        // verify required parameter 'authorName' is not null or undefined
        if (authorName === null || authorName === undefined) {
            throw new Error('Required parameter authorName was null or undefined when calling keysDeleteKey.');
        }

        // verify required parameter 'authorEmail' is not null or undefined
        if (authorEmail === null || authorEmail === undefined) {
            throw new Error('Required parameter authorEmail was null or undefined when calling keysDeleteKey.');
        }

        if (keyPath !== undefined) {
            localVarQueryParameters['keyPath'] = ObjectSerializer.serialize(keyPath, "string");
        }

        if (authorName !== undefined) {
            localVarQueryParameters['author.name'] = ObjectSerializer.serialize(authorName, "string");
        }

        if (authorEmail !== undefined) {
            localVarQueryParameters['author.email'] = ObjectSerializer.serialize(authorEmail, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(requestBody, "Array<string>")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param keyPath 
     * @param revision 
     */
    public keysGetKey (keyPath: string, revision?: string) : Promise<{ response: http.ClientResponse; body: any;  }> {
        const localVarPath = this.basePath + '/keys';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'keyPath' is not null or undefined
        if (keyPath === null || keyPath === undefined) {
            throw new Error('Required parameter keyPath was null or undefined when calling keysGetKey.');
        }

        if (keyPath !== undefined) {
            localVarQueryParameters['keyPath'] = ObjectSerializer.serialize(keyPath, "string");
        }

        if (revision !== undefined) {
            localVarQueryParameters['revision'] = ObjectSerializer.serialize(revision, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "any");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
