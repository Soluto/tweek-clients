/*
 * Tweek
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Patch;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchemaApi {
    private ApiClient apiClient;

    public SchemaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteIdentity
     * @param identityType The type of the identity (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteIdentityCall(String identityType, String authorName, String authorEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schemas/{identityType}"
            .replaceAll("\\{" + "identityType" + "\\}", apiClient.escapeString(identityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authorName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("author.name", authorName));
        if (authorEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("author.email", authorEmail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIdentityValidateBeforeCall(String identityType, String authorName, String authorEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'identityType' is set
        if (identityType == null) {
            throw new ApiException("Missing the required parameter 'identityType' when calling deleteIdentity(Async)");
        }
        
        // verify the required parameter 'authorName' is set
        if (authorName == null) {
            throw new ApiException("Missing the required parameter 'authorName' when calling deleteIdentity(Async)");
        }
        
        // verify the required parameter 'authorEmail' is set
        if (authorEmail == null) {
            throw new ApiException("Missing the required parameter 'authorEmail' when calling deleteIdentity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteIdentityCall(identityType, authorName, authorEmail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete Schema
     * @param identityType The type of the identity (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteIdentity(String identityType, String authorName, String authorEmail) throws ApiException {
        ApiResponse<String> resp = deleteIdentityWithHttpInfo(identityType, authorName, authorEmail);
        return resp.getData();
    }

    /**
     * 
     * Delete Schema
     * @param identityType The type of the identity (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteIdentityWithHttpInfo(String identityType, String authorName, String authorEmail) throws ApiException {
        com.squareup.okhttp.Call call = deleteIdentityValidateBeforeCall(identityType, authorName, authorEmail, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete Schema
     * @param identityType The type of the identity (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIdentityAsync(String identityType, String authorName, String authorEmail, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIdentityValidateBeforeCall(identityType, authorName, authorEmail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSchemas
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSchemasCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schemas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSchemasValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSchemasCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get query
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> getSchemas() throws ApiException {
        ApiResponse<List<Object>> resp = getSchemasWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get query
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> getSchemasWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSchemasValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get query
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSchemasAsync(final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSchemasValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schemaAddIdentity
     * @param identityType  (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param value  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schemaAddIdentityCall(String identityType, String authorName, String authorEmail, Object value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/schemas/{identityType}"
            .replaceAll("\\{" + "identityType" + "\\}", apiClient.escapeString(identityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authorName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("author.name", authorName));
        if (authorEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("author.email", authorEmail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schemaAddIdentityValidateBeforeCall(String identityType, String authorName, String authorEmail, Object value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'identityType' is set
        if (identityType == null) {
            throw new ApiException("Missing the required parameter 'identityType' when calling schemaAddIdentity(Async)");
        }
        
        // verify the required parameter 'authorName' is set
        if (authorName == null) {
            throw new ApiException("Missing the required parameter 'authorName' when calling schemaAddIdentity(Async)");
        }
        
        // verify the required parameter 'authorEmail' is set
        if (authorEmail == null) {
            throw new ApiException("Missing the required parameter 'authorEmail' when calling schemaAddIdentity(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling schemaAddIdentity(Async)");
        }
        

        com.squareup.okhttp.Call call = schemaAddIdentityCall(identityType, authorName, authorEmail, value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Add identity
     * @param identityType  (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param value  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String schemaAddIdentity(String identityType, String authorName, String authorEmail, Object value) throws ApiException {
        ApiResponse<String> resp = schemaAddIdentityWithHttpInfo(identityType, authorName, authorEmail, value);
        return resp.getData();
    }

    /**
     * 
     * Add identity
     * @param identityType  (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param value  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> schemaAddIdentityWithHttpInfo(String identityType, String authorName, String authorEmail, Object value) throws ApiException {
        com.squareup.okhttp.Call call = schemaAddIdentityValidateBeforeCall(identityType, authorName, authorEmail, value, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add identity
     * @param identityType  (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param value  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schemaAddIdentityAsync(String identityType, String authorName, String authorEmail, Object value, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schemaAddIdentityValidateBeforeCall(identityType, authorName, authorEmail, value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schemaPatchIdentity
     * @param identityType  (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param patch  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schemaPatchIdentityCall(String identityType, String authorName, String authorEmail, Patch patch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = patch;

        // create path and map variables
        String localVarPath = "/schemas/{identityType}"
            .replaceAll("\\{" + "identityType" + "\\}", apiClient.escapeString(identityType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authorName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("author.name", authorName));
        if (authorEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("author.email", authorEmail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schemaPatchIdentityValidateBeforeCall(String identityType, String authorName, String authorEmail, Patch patch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'identityType' is set
        if (identityType == null) {
            throw new ApiException("Missing the required parameter 'identityType' when calling schemaPatchIdentity(Async)");
        }
        
        // verify the required parameter 'authorName' is set
        if (authorName == null) {
            throw new ApiException("Missing the required parameter 'authorName' when calling schemaPatchIdentity(Async)");
        }
        
        // verify the required parameter 'authorEmail' is set
        if (authorEmail == null) {
            throw new ApiException("Missing the required parameter 'authorEmail' when calling schemaPatchIdentity(Async)");
        }
        
        // verify the required parameter 'patch' is set
        if (patch == null) {
            throw new ApiException("Missing the required parameter 'patch' when calling schemaPatchIdentity(Async)");
        }
        

        com.squareup.okhttp.Call call = schemaPatchIdentityCall(identityType, authorName, authorEmail, patch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update identity
     * @param identityType  (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param patch  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String schemaPatchIdentity(String identityType, String authorName, String authorEmail, Patch patch) throws ApiException {
        ApiResponse<String> resp = schemaPatchIdentityWithHttpInfo(identityType, authorName, authorEmail, patch);
        return resp.getData();
    }

    /**
     * 
     * Update identity
     * @param identityType  (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param patch  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> schemaPatchIdentityWithHttpInfo(String identityType, String authorName, String authorEmail, Patch patch) throws ApiException {
        com.squareup.okhttp.Call call = schemaPatchIdentityValidateBeforeCall(identityType, authorName, authorEmail, patch, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update identity
     * @param identityType  (required)
     * @param authorName  (required)
     * @param authorEmail  (required)
     * @param patch  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schemaPatchIdentityAsync(String identityType, String authorName, String authorEmail, Patch patch, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schemaPatchIdentityValidateBeforeCall(identityType, authorName, authorEmail, patch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
