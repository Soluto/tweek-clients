---
swagger: "2.0"
info:
  version: "0.1.0"
  title: "Tweek"
  license:
    name: "MIT"
    url: "https://github.com/Soluto/tweek/blob/master/LICENSE"
basePath: "/api/v2/"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /values:
    get:
      tags:
      - "configuraiton"
      description: "Get tweek key value"
      operationId: "GetValue"
      parameters:
      - name: "keyName"
        in: "query"
        description: "Configuration key name"
        required: true
        type: "string"
        x-exportParamName: "KeyName"
      - name: "$include"
        in: "query"
        description: "Include additional keys"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Include"
      - name: "$flatten"
        in: "query"
        description: "Return flat key/value JSON (no nesting)"
        required: false
        type: "boolean"
        x-exportParamName: "Flatten"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid Request"
        403:
          description: "Unauthorized"
        404:
          description: "Key not found"
  /context/{identityType}/{identityId}:
    get:
      tags:
      - "context"
      description: "Get identity context"
      operationId: "GetContext"
      produces:
      - "application/json"
      parameters:
      - name: "identityType"
        in: "path"
        description: "the type of the identity - for example user"
        required: true
        type: "string"
        x-exportParamName: "IdentityType"
      - name: "identityId"
        in: "path"
        description: "the identifier of the identity - for example jaime"
        required: true
        type: "string"
        x-exportParamName: "IdentityId"
      responses:
        200:
          description: "Ok"
    post:
      tags:
      - "context"
      description: "Save identity context"
      operationId: "SaveContext"
      parameters:
      - name: "identityType"
        in: "path"
        description: "the type of the identity - for example user"
        required: true
        type: "string"
        x-exportParamName: "IdentityType"
      - name: "identityId"
        in: "path"
        description: "the identifier of the identity - for example jaime"
        required: true
        type: "string"
        x-exportParamName: "IdentityId"
      responses:
        200:
          description: "Ok"
  /context/{identityType}/{identityId}/{prop}:
    delete:
      tags:
      - "context"
      description: "Delete identity context property"
      operationId: "DeleteContextProp"
      parameters:
      - name: "identityType"
        in: "path"
        description: "the type of the identity - for example user"
        required: true
        type: "string"
        x-exportParamName: "IdentityType"
      - name: "identityId"
        in: "path"
        description: "the identifier of the identity - for example jaime"
        required: true
        type: "string"
        x-exportParamName: "IdentityId"
      - name: "prop"
        in: "path"
        description: "the property to delete, for example age"
        required: true
        type: "string"
        x-exportParamName: "Prop"
      responses:
        200:
          description: "OK"
  /keys:
    get:
      tags:
      - "keys"
      description: ""
      operationId: "KeysGetKey"
      produces:
      - "application/json"
      parameters:
      - name: "keyPath"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "KeyPath"
      - name: "revision"
        in: "query"
        description: ""
        required: false
        type: "string"
        x-exportParamName: "Revision"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Ok"
          schema:
            type: "object"
    put:
      tags:
      - "keys"
      description: "Save Key"
      operationId: "CreateKey"
      consumes:
      - "application/json"
      produces:
      - "text/html"
      parameters:
      - name: "keyPath"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "KeyPath"
      - name: "author.name"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorName"
      - name: "author.email"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorEmail"
      - in: "body"
        name: "newKeyModel"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/KeyUpdateModel"
        x-exportParamName: "NewKeyModel"
      responses:
        200:
          description: "Ok"
          schema:
            type: "string"
    delete:
      tags:
      - "keys"
      description: ""
      operationId: "KeysDeleteKey"
      produces:
      - "text/html"
      parameters:
      - name: "keyPath"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "KeyPath"
      - name: "author.name"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorName"
      - name: "author.email"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorEmail"
      - in: "body"
        name: "additionalKeys"
        description: ""
        required: false
        schema:
          type: "array"
          items:
            type: "string"
        x-exportParamName: "AdditionalKeys"
        x-optionalDataType: "[]string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "string"
  /tags:
    get:
      tags:
      - "tags"
      description: "Get all tags"
      operationId: "TagsGet"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              type: "string"
    put:
      tags:
      - "tags"
      description: "Save tags"
      operationId: "SaveTag"
      consumes:
      - "application/json"
      produces:
      - "text/html"
      parameters:
      - in: "body"
        name: "tagsToSave"
        description: "The tags that need saving"
        required: true
        schema:
          type: "object"
        x-exportParamName: "TagsToSave"
      responses:
        204:
          description: "No content"
  /schemas:
    get:
      tags:
      - "schema"
      description: "Get query"
      operationId: "GetSchemas"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /schemas/{identityType}:
    post:
      tags:
      - "schema"
      description: "Add identity"
      operationId: "SchemaAddIdentity"
      consumes:
      - "application/json"
      produces:
      - "text/html"
      parameters:
      - name: "identityType"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "IdentityType"
      - name: "author.name"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorName"
      - name: "author.email"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorEmail"
      - in: "body"
        name: "value"
        description: ""
        required: true
        schema:
          type: "object"
        x-exportParamName: "Value"
      responses:
        200:
          description: "Ok"
          schema:
            type: "string"
    delete:
      tags:
      - "schema"
      description: "Delete Schema"
      operationId: "DeleteIdentity"
      produces:
      - "text/html"
      parameters:
      - name: "identityType"
        in: "path"
        description: "The type of the identity"
        required: true
        type: "string"
        x-exportParamName: "IdentityType"
      - name: "author.name"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorName"
      - name: "author.email"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorEmail"
      responses:
        200:
          description: "Ok"
          schema:
            type: "string"
    patch:
      tags:
      - "schema"
      description: "Update identity"
      operationId: "SchemaPatchIdentity"
      consumes:
      - "application/json"
      produces:
      - "text/html"
      parameters:
      - name: "identityType"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "IdentityType"
      - name: "author.name"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorName"
      - name: "author.email"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorEmail"
      - in: "body"
        name: "patch"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/Patch"
        x-exportParamName: "Patch"
      responses:
        200:
          description: "Ok"
          schema:
            type: "string"
  /manifests:
    get:
      tags:
      - "manifest"
      description: "Get Manifests"
      operationId: "GetManifests"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /suggestions:
    get:
      tags:
      - "suggestions"
      description: "Get Suggestions"
      operationId: "GetSuggestions"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /search:
    get:
      tags:
      - "search"
      description: "Search"
      operationId: "Search"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /dependents:
    get:
      tags:
      - "dependent"
      description: "Get Dependents"
      operationId: "GetDependents"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /revision-history:
    get:
      tags:
      - "revision-history"
      description: "Get Revision History"
      operationId: "GetRevisionHistory"
      produces:
      - "application/json"
      parameters:
      - name: "keyPath"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "KeyPath"
      - name: "since"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Since"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /policies:
    get:
      tags:
      - "policy"
      description: "Get Policies"
      operationId: "GetPolicies"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
    put:
      tags:
      - "policy"
      description: "Replace Policy"
      operationId: "ReplacePolicy"
      parameters: []
      responses:
        200:
          description: "OK"
    patch:
      tags:
      - "policy"
      description: "Update Policy"
      operationId: "UpdatePolicy"
      parameters:
      - in: "body"
        name: "policyPatch"
        required: true
        schema:
          $ref: "#/definitions/Patch"
        x-exportParamName: "PolicyPatch"
      responses:
        200:
          description: "OK"
  /apps:
    post:
      tags:
      - "apps"
      description: ""
      operationId: "AppsCreateApp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "author.name"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorName"
      - name: "author.email"
        in: "query"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "AuthorEmail"
      - in: "body"
        name: "newAppModel"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/AppCreationRequestModel"
        x-exportParamName: "NewAppModel"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/AppCreationResponseModel"
definitions:
  PatchOperation:
    type: "object"
    properties:
      op:
        type: "string"
      path:
        type: "string"
      value:
        type: "object"
        properties: {}
  Patch:
    type: "array"
    items:
      $ref: "#/definitions/PatchOperation"
  KeyUpdateModel:
    type: "object"
    required:
    - "implementation"
    - "manifest"
    properties:
      implementation:
        type: "object"
        description: ""
        properties: {}
      manifest:
        type: "object"
        description: ""
        properties: {}
    description: ""
    example:
      manifest: "{}"
      implementation: "{}"
  AppCreationResponseModel:
    type: "object"
    required:
    - "appId"
    - "appSecret"
    properties:
      appId:
        type: "string"
        description: ""
      appSecret:
        type: "string"
        description: ""
    description: ""
    example:
      appId: "appId"
      appSecret: "appSecret"
  AppCreationRequestModel:
    type: "object"
    required:
    - "name"
    - "permissions"
    properties:
      name:
        type: "string"
        description: ""
      permissions:
        type: "array"
        description: ""
        items:
          type: "string"
    description: ""
    example:
      permissions:
      - "permissions"
      - "permissions"
      name: "name"
