/* 
 * Tweek
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Schema
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType">The type of the identity</param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <returns>string</returns>
        string DeleteIdentity (string identityType, string authorName, string authorEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Schema
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType">The type of the identity</param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteIdentityWithHttpInfo (string identityType, string authorName, string authorEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get query
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetSchemas ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get query
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetSchemasWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add identity
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="value"></param>
        /// <returns>string</returns>
        string SchemaAddIdentity (string identityType, string authorName, string authorEmail, Object value);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add identity
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SchemaAddIdentityWithHttpInfo (string identityType, string authorName, string authorEmail, Object value);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update identity
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="patch"></param>
        /// <returns>string</returns>
        string SchemaPatchIdentity (string identityType, string authorName, string authorEmail, Patch patch);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update identity
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="patch"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SchemaPatchIdentityWithHttpInfo (string identityType, string authorName, string authorEmail, Patch patch);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Schema
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType">The type of the identity</param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteIdentityAsync (string identityType, string authorName, string authorEmail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete Schema
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType">The type of the identity</param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteIdentityAsyncWithHttpInfo (string identityType, string authorName, string authorEmail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get query
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetSchemasAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get query
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetSchemasAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add identity
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="value"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SchemaAddIdentityAsync (string identityType, string authorName, string authorEmail, Object value);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add identity
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="value"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SchemaAddIdentityAsyncWithHttpInfo (string identityType, string authorName, string authorEmail, Object value);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update identity
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="patch"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SchemaPatchIdentityAsync (string identityType, string authorName, string authorEmail, Patch patch);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update identity
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="patch"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SchemaPatchIdentityAsyncWithHttpInfo (string identityType, string authorName, string authorEmail, Patch patch);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemaApi : ISchemaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemaApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Delete Schema
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType">The type of the identity</param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <returns>string</returns>
        public string DeleteIdentity (string identityType, string authorName, string authorEmail)
        {
             ApiResponse<string> localVarResponse = DeleteIdentityWithHttpInfo(identityType, authorName, authorEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete Schema
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType">The type of the identity</param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DeleteIdentityWithHttpInfo (string identityType, string authorName, string authorEmail)
        {
            // verify the required parameter 'identityType' is set
            if (identityType == null)
                throw new ApiException(400, "Missing required parameter 'identityType' when calling SchemaApi->DeleteIdentity");
            // verify the required parameter 'authorName' is set
            if (authorName == null)
                throw new ApiException(400, "Missing required parameter 'authorName' when calling SchemaApi->DeleteIdentity");
            // verify the required parameter 'authorEmail' is set
            if (authorEmail == null)
                throw new ApiException(400, "Missing required parameter 'authorEmail' when calling SchemaApi->DeleteIdentity");

            var localVarPath = "/schemas/{identityType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityType != null) localVarPathParams.Add("identityType", this.Configuration.ApiClient.ParameterToString(identityType)); // path parameter
            if (authorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.name", authorName)); // query parameter
            if (authorEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.email", authorEmail)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Delete Schema
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType">The type of the identity</param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteIdentityAsync (string identityType, string authorName, string authorEmail)
        {
             ApiResponse<string> localVarResponse = await DeleteIdentityAsyncWithHttpInfo(identityType, authorName, authorEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Delete Schema
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType">The type of the identity</param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DeleteIdentityAsyncWithHttpInfo (string identityType, string authorName, string authorEmail)
        {
            // verify the required parameter 'identityType' is set
            if (identityType == null)
                throw new ApiException(400, "Missing required parameter 'identityType' when calling SchemaApi->DeleteIdentity");
            // verify the required parameter 'authorName' is set
            if (authorName == null)
                throw new ApiException(400, "Missing required parameter 'authorName' when calling SchemaApi->DeleteIdentity");
            // verify the required parameter 'authorEmail' is set
            if (authorEmail == null)
                throw new ApiException(400, "Missing required parameter 'authorEmail' when calling SchemaApi->DeleteIdentity");

            var localVarPath = "/schemas/{identityType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityType != null) localVarPathParams.Add("identityType", this.Configuration.ApiClient.ParameterToString(identityType)); // path parameter
            if (authorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.name", authorName)); // query parameter
            if (authorEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.email", authorEmail)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Get query
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetSchemas ()
        {
             ApiResponse<List<Object>> localVarResponse = GetSchemasWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get query
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetSchemasWithHttpInfo ()
        {

            var localVarPath = "/schemas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Get query
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetSchemasAsync ()
        {
             ApiResponse<List<Object>> localVarResponse = await GetSchemasAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get query
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetSchemasAsyncWithHttpInfo ()
        {

            var localVarPath = "/schemas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Add identity
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="value"></param>
        /// <returns>string</returns>
        public string SchemaAddIdentity (string identityType, string authorName, string authorEmail, Object value)
        {
             ApiResponse<string> localVarResponse = SchemaAddIdentityWithHttpInfo(identityType, authorName, authorEmail, value);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Add identity
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="value"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SchemaAddIdentityWithHttpInfo (string identityType, string authorName, string authorEmail, Object value)
        {
            // verify the required parameter 'identityType' is set
            if (identityType == null)
                throw new ApiException(400, "Missing required parameter 'identityType' when calling SchemaApi->SchemaAddIdentity");
            // verify the required parameter 'authorName' is set
            if (authorName == null)
                throw new ApiException(400, "Missing required parameter 'authorName' when calling SchemaApi->SchemaAddIdentity");
            // verify the required parameter 'authorEmail' is set
            if (authorEmail == null)
                throw new ApiException(400, "Missing required parameter 'authorEmail' when calling SchemaApi->SchemaAddIdentity");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SchemaApi->SchemaAddIdentity");

            var localVarPath = "/schemas/{identityType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityType != null) localVarPathParams.Add("identityType", this.Configuration.ApiClient.ParameterToString(identityType)); // path parameter
            if (authorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.name", authorName)); // query parameter
            if (authorEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.email", authorEmail)); // query parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SchemaAddIdentity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Add identity
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="value"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SchemaAddIdentityAsync (string identityType, string authorName, string authorEmail, Object value)
        {
             ApiResponse<string> localVarResponse = await SchemaAddIdentityAsyncWithHttpInfo(identityType, authorName, authorEmail, value);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Add identity
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="value"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SchemaAddIdentityAsyncWithHttpInfo (string identityType, string authorName, string authorEmail, Object value)
        {
            // verify the required parameter 'identityType' is set
            if (identityType == null)
                throw new ApiException(400, "Missing required parameter 'identityType' when calling SchemaApi->SchemaAddIdentity");
            // verify the required parameter 'authorName' is set
            if (authorName == null)
                throw new ApiException(400, "Missing required parameter 'authorName' when calling SchemaApi->SchemaAddIdentity");
            // verify the required parameter 'authorEmail' is set
            if (authorEmail == null)
                throw new ApiException(400, "Missing required parameter 'authorEmail' when calling SchemaApi->SchemaAddIdentity");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SchemaApi->SchemaAddIdentity");

            var localVarPath = "/schemas/{identityType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityType != null) localVarPathParams.Add("identityType", this.Configuration.ApiClient.ParameterToString(identityType)); // path parameter
            if (authorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.name", authorName)); // query parameter
            if (authorEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.email", authorEmail)); // query parameter
            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SchemaAddIdentity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Update identity
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="patch"></param>
        /// <returns>string</returns>
        public string SchemaPatchIdentity (string identityType, string authorName, string authorEmail, Patch patch)
        {
             ApiResponse<string> localVarResponse = SchemaPatchIdentityWithHttpInfo(identityType, authorName, authorEmail, patch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update identity
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="patch"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SchemaPatchIdentityWithHttpInfo (string identityType, string authorName, string authorEmail, Patch patch)
        {
            // verify the required parameter 'identityType' is set
            if (identityType == null)
                throw new ApiException(400, "Missing required parameter 'identityType' when calling SchemaApi->SchemaPatchIdentity");
            // verify the required parameter 'authorName' is set
            if (authorName == null)
                throw new ApiException(400, "Missing required parameter 'authorName' when calling SchemaApi->SchemaPatchIdentity");
            // verify the required parameter 'authorEmail' is set
            if (authorEmail == null)
                throw new ApiException(400, "Missing required parameter 'authorEmail' when calling SchemaApi->SchemaPatchIdentity");
            // verify the required parameter 'patch' is set
            if (patch == null)
                throw new ApiException(400, "Missing required parameter 'patch' when calling SchemaApi->SchemaPatchIdentity");

            var localVarPath = "/schemas/{identityType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityType != null) localVarPathParams.Add("identityType", this.Configuration.ApiClient.ParameterToString(identityType)); // path parameter
            if (authorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.name", authorName)); // query parameter
            if (authorEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.email", authorEmail)); // query parameter
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SchemaPatchIdentity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Update identity
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="patch"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SchemaPatchIdentityAsync (string identityType, string authorName, string authorEmail, Patch patch)
        {
             ApiResponse<string> localVarResponse = await SchemaPatchIdentityAsyncWithHttpInfo(identityType, authorName, authorEmail, patch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update identity
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityType"></param>
        /// <param name="authorName"></param>
        /// <param name="authorEmail"></param>
        /// <param name="patch"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SchemaPatchIdentityAsyncWithHttpInfo (string identityType, string authorName, string authorEmail, Patch patch)
        {
            // verify the required parameter 'identityType' is set
            if (identityType == null)
                throw new ApiException(400, "Missing required parameter 'identityType' when calling SchemaApi->SchemaPatchIdentity");
            // verify the required parameter 'authorName' is set
            if (authorName == null)
                throw new ApiException(400, "Missing required parameter 'authorName' when calling SchemaApi->SchemaPatchIdentity");
            // verify the required parameter 'authorEmail' is set
            if (authorEmail == null)
                throw new ApiException(400, "Missing required parameter 'authorEmail' when calling SchemaApi->SchemaPatchIdentity");
            // verify the required parameter 'patch' is set
            if (patch == null)
                throw new ApiException(400, "Missing required parameter 'patch' when calling SchemaApi->SchemaPatchIdentity");

            var localVarPath = "/schemas/{identityType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityType != null) localVarPathParams.Add("identityType", this.Configuration.ApiClient.ParameterToString(identityType)); // path parameter
            if (authorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.name", authorName)); // query parameter
            if (authorEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "author.email", authorEmail)); // query parameter
            if (patch != null && patch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SchemaPatchIdentity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
