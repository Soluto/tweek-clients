/* 
 * Tweek
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// KeyUpdateModel
    /// </summary>
    [DataContract]
    public partial class KeyUpdateModel :  IEquatable<KeyUpdateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyUpdateModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KeyUpdateModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyUpdateModel" /> class.
        /// </summary>
        /// <param name="implementation">implementation (required).</param>
        /// <param name="manifest">manifest (required).</param>
        public KeyUpdateModel(Object implementation = default(Object), Object manifest = default(Object))
        {
            // to ensure "implementation" is required (not null)
            if (implementation == null)
            {
                throw new InvalidDataException("implementation is a required property for KeyUpdateModel and cannot be null");
            }
            else
            {
                this.Implementation = implementation;
            }
            // to ensure "manifest" is required (not null)
            if (manifest == null)
            {
                throw new InvalidDataException("manifest is a required property for KeyUpdateModel and cannot be null");
            }
            else
            {
                this.Manifest = manifest;
            }
        }
        
        /// <summary>
        /// Gets or Sets Implementation
        /// </summary>
        [DataMember(Name="implementation", EmitDefaultValue=false)]
        public Object Implementation { get; set; }

        /// <summary>
        /// Gets or Sets Manifest
        /// </summary>
        [DataMember(Name="manifest", EmitDefaultValue=false)]
        public Object Manifest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeyUpdateModel {\n");
            sb.Append("  Implementation: ").Append(Implementation).Append("\n");
            sb.Append("  Manifest: ").Append(Manifest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeyUpdateModel);
        }

        /// <summary>
        /// Returns true if KeyUpdateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of KeyUpdateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyUpdateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Implementation == input.Implementation ||
                    (this.Implementation != null &&
                    this.Implementation.Equals(input.Implementation))
                ) && 
                (
                    this.Manifest == input.Manifest ||
                    (this.Manifest != null &&
                    this.Manifest.Equals(input.Manifest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Implementation != null)
                    hashCode = hashCode * 59 + this.Implementation.GetHashCode();
                if (this.Manifest != null)
                    hashCode = hashCode * 59 + this.Manifest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
