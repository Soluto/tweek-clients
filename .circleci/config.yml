version: 2
jobs:
  build:
    working_directory: ~/tweek-clients

    environment:
      NODE_ENV: development

    docker:
      - image: node:6.10.1
    
    steps:
      - checkout

      - setup_remote_docker:
          reusable: true

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
            curl -L -o /usr/bin/docker-compose "https://github.com/docker/compose/releases/download/1.11.2/docker-compose-$(uname -s)-$(uname -m)"
            chmod +x /usr/bin/docker-compose

      - run: 
          name: run dependencies
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker-compose pull
            docker-compose build tests
            docker-compose build dotnet_tests
            docker-compose up -d tweek-api
            
      - run:
          name: Prepare for tests
          command: |
            docker run --network=tweekclients_default node:6.10.1-slim wget --tries 20 --timeout=15 --read-timeout=20 --waitretry=30 --retry-connrefused http://tweek-api/status

      - run: 
          name: Test tweek-client
          command: docker-compose run tests /bin/bash -c "cd tweek-client && yarn test"

      - run: 
          name: Test tweek-local-cache
          command: docker-compose run tests /bin/bash -c "cd tweek-local-cache && yarn test"

      - run: 
          name: Test react-tweek
          command: docker-compose run tests /bin/bash -c "cd react-tweek && yarn test"

      - run:
          name: Test dotnet client
          command: |
            docker-compose up -d dotnet_tests && \
            docker exec -e "VersionSuffix=0.2.$CIRCLE_BUILD_NUM" $(docker-compose ps|grep dotnet_tests|cut -d" " -f1) /bin/bash -c "cd /test-environment/ && dotnet build -c release" && \
            docker exec -e "VersionSuffix=0.2.$CIRCLE_BUILD_NUM" $(docker-compose ps|grep dotnet_tests|cut -d" " -f1) /bin/bash -c "cd /test-environment/Tweek.Client.Tests && dotnet test"

      - deploy: 
          name: npm
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
              if [[ $(node -p -e "require('./js/tweek-client/package.json').version") != $(npm show tweek-client version) ]]; then
                echo "publish tweek-client"
                cd js/tweek-client && yarn && npm run build && npm publish && cd ../..
              fi
              if [[ $(node -p -e "require('./js/tweek-local-cache/package.json').version") != $(npm show tweek-local-cache version) ]]; then
                echo "publish tweek-local-cache"
                cd js/tweek-client && yarn && npm run build && cd ../..
                cd js/tweek-local-cache && yarn && npm run build && npm publish && cd ../..
              fi
              if [[ $(node -p -e "require('./js/react-tweek/package.json').version") != $(npm show react-tweek version) ]]; then
                echo "publish react-tweek"
                cd js/react-tweek && yarn && npm run build && npm publish && cd ../..
              fi
            else 
              echo "not deploying on non master branches"
            fi

      - deploy: 
          name: nuget
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker exec -e "VersionSuffix=0.2.$CIRCLE_BUILD_NUM" $(docker-compose ps|grep dotnet_tests|cut -d" " -f1) /bin/bash -c "dotnet nuget push /test-environment/Tweek.Client/bin/Release/Tweek.Client\*.nupkg -s nuget.org -k $NUGET_APIKEY"
            else
              echo "not deploying on non master branches"
            fi
