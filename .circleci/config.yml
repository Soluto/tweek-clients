version: 2
jobs:
  test_js:
    working_directory: ~/tweek-clients
    environment:
      NODE_ENV: development
    
    machine:
      node:
        version: 8.7.0
        
    steps:
      - checkout

      - run: 
          name: Run environment
          command: |
            docker pull soluto/tweek-blackbox:latest
            docker run -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/testRepoData:/repo --name tweek_environment soluto/tweek-blackbox
          background: true

      - run:
          name: Run JS tests
          command: |
            docker build -t js_tests .
            for RETRY in {1..180}; do docker inspect -f {{.State.Health.Status}} tweek_environment | grep -w "healthy" && break || sleep 1 ; done
            docker run --network=blackbox_default -e TWEEK_LOCAL_API=http://api js_tests

      - deploy: 
          name: npm
          command: |
            npm install -g yarn
            yarn && yarn bootstrap
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
              if [[ $(node -p -e "require('./js/tweek-client/package.json').version") != $(npm show tweek-client version) ]]; then
                echo "publish tweek-client"
                cd js/tweek-client && yarn && npm run build && npm publish && cd ../..
              fi
              if [[ $(node -p -e "require('./js/tweek-local-cache/package.json').version") != $(npm show tweek-local-cache version) ]]; then
                echo "publish tweek-local-cache"
                cd js/tweek-client && yarn && npm run build && cd ../..
                cd js/tweek-local-cache && yarn && npm run build && npm publish && cd ../..
              fi
              if [[ $(node -p -e "require('./js/react-tweek/package.json').version") != $(npm show react-tweek version) ]]; then
                echo "publish react-tweek"
                cd js/react-tweek && yarn && npm run build && npm publish && cd ../..
              fi
            else 
              echo "not deploying on non master branches"
            fi

  test_dotnet:
    working_directory: ~/tweek-clients
    
    machine: true

    steps:
      - checkout

      - run: 
          name: Run environment
          command: |
            docker pull soluto/tweek-blackbox:latest
            docker run -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/testRepoData:/repo --name tweek_environment soluto/tweek-blackbox
          background: true

      - run:
          name: Run dotNet tests
          command: |
            docker build -t dotnet_tests ./dotnet
            docker run -d --network=blackbox_default -e TWEEK_LOCAL_API=http://api --name=dotnet_tests dotnet_tests
            for RETRY in {1..180}; do docker inspect -f {{.State.Health.Status}} tweek_environment | grep -w "healthy" && break || sleep 1 ; done
            docker exec -e "VersionSuffix=0.2.$CIRCLE_BUILD_NUM" dotnet_tests /bin/bash -c "cd /test-environment/ && dotnet build -c release"
            docker exec -e "VersionSuffix=0.2.$CIRCLE_BUILD_NUM" dotnet_tests /bin/bash -c "cd /test-environment/Tweek.Client.Tests && dotnet test"
      
      - deploy: 
          name: nuget
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker exec -e "VersionSuffix=0.2.$CIRCLE_BUILD_NUM" dotnet_tests /bin/bash -c "dotnet nuget push /test-environment/Tweek.Client/bin/Release/Tweek.Client\*.nupkg -s nuget.org -k $NUGET_APIKEY"
            else
              echo "not deploying on non master branches"
            fi

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - test_js
      - test_dotnet
